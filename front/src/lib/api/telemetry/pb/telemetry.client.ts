// @generated by protobuf-ts 2.9.3 with parameter optimize_code_size
// @generated from protobuf file "telemetry.proto" (package "loggo.api.telemetry", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Telemetry } from "./telemetry";
import type { StreamLogMessagesResponse } from "./telemetry";
import type { StreamLogMessagesRequest } from "./telemetry";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListLogMessagesResponse } from "./telemetry";
import type { ListLogMessagesRequest } from "./telemetry";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * :TODO: add comments to the API packages once they are semi-finalized
 *
 * @generated from protobuf service loggo.api.telemetry.Telemetry
 */
export interface ITelemetryClient {
    /**
     * @generated from protobuf rpc: ListLogMessages(loggo.api.telemetry.ListLogMessagesRequest) returns (loggo.api.telemetry.ListLogMessagesResponse);
     */
    listLogMessages(input: ListLogMessagesRequest, options?: RpcOptions): UnaryCall<ListLogMessagesRequest, ListLogMessagesResponse>;
    /**
     * @generated from protobuf rpc: StreamLogMessages(loggo.api.telemetry.StreamLogMessagesRequest) returns (stream loggo.api.telemetry.StreamLogMessagesResponse);
     */
    streamLogMessages(input: StreamLogMessagesRequest, options?: RpcOptions): ServerStreamingCall<StreamLogMessagesRequest, StreamLogMessagesResponse>;
}
/**
 * :TODO: add comments to the API packages once they are semi-finalized
 *
 * @generated from protobuf service loggo.api.telemetry.Telemetry
 */
export class TelemetryClient implements ITelemetryClient, ServiceInfo {
    typeName = Telemetry.typeName;
    methods = Telemetry.methods;
    options = Telemetry.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListLogMessages(loggo.api.telemetry.ListLogMessagesRequest) returns (loggo.api.telemetry.ListLogMessagesResponse);
     */
    listLogMessages(input: ListLogMessagesRequest, options?: RpcOptions): UnaryCall<ListLogMessagesRequest, ListLogMessagesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListLogMessagesRequest, ListLogMessagesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StreamLogMessages(loggo.api.telemetry.StreamLogMessagesRequest) returns (stream loggo.api.telemetry.StreamLogMessagesResponse);
     */
    streamLogMessages(input: StreamLogMessagesRequest, options?: RpcOptions): ServerStreamingCall<StreamLogMessagesRequest, StreamLogMessagesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamLogMessagesRequest, StreamLogMessagesResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
