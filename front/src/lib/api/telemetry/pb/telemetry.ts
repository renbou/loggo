// @generated by protobuf-ts 2.9.3 with parameter optimize_code_size
// @generated from protobuf file "telemetry.proto" (package "loggo.api.telemetry", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message loggo.api.telemetry.ListLogMessagesRequest
 */
export interface ListLogMessagesRequest {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp from = 1;
     */
    from?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp to = 2;
     */
    to?: Timestamp;
    /**
     * @generated from protobuf field: optional loggo.api.telemetry.LogFilter filter = 3;
     */
    filter?: LogFilter;
    /**
     * @generated from protobuf field: int32 page_size = 4;
     */
    pageSize: number;
    /**
     * @generated from protobuf field: string page_token = 5;
     */
    pageToken: string;
}
/**
 * @generated from protobuf message loggo.api.telemetry.ListLogMessagesResponse
 */
export interface ListLogMessagesResponse {
    /**
     * @generated from protobuf field: loggo.api.telemetry.LogBatch batch = 1;
     */
    batch?: LogBatch;
}
/**
 * @generated from protobuf message loggo.api.telemetry.StreamLogMessagesRequest
 */
export interface StreamLogMessagesRequest {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp from = 1;
     */
    from?: Timestamp;
    /**
     * @generated from protobuf field: optional loggo.api.telemetry.LogFilter filter = 2;
     */
    filter?: LogFilter;
    /**
     * @generated from protobuf field: int32 page_size = 3;
     */
    pageSize: number;
}
/**
 * @generated from protobuf message loggo.api.telemetry.StreamLogMessagesResponse
 */
export interface StreamLogMessagesResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "batch";
        /**
         * @generated from protobuf field: loggo.api.telemetry.LogBatch batch = 1;
         */
        batch: LogBatch;
    } | {
        oneofKind: "message";
        /**
         * @generated from protobuf field: bytes message = 2;
         */
        message: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message loggo.api.telemetry.LogMessage
 */
export interface LogMessage {
    /**
     * @generated from protobuf field: bytes message = 1;
     */
    message: Uint8Array;
    /**
     * @generated from protobuf field: bytes id = 2;
     */
    id: Uint8Array;
}
/**
 * @generated from protobuf message loggo.api.telemetry.LogBatch
 */
export interface LogBatch {
    /**
     * @generated from protobuf field: repeated loggo.api.telemetry.LogMessage messages = 1;
     */
    messages: LogMessage[];
    /**
     * @generated from protobuf field: string next_page_token = 2;
     */
    nextPageToken: string;
}
/**
 * @generated from protobuf message loggo.api.telemetry.LogFilter
 */
export interface LogFilter {
    /**
     * @generated from protobuf oneof: filter
     */
    filter: {
        oneofKind: "text";
        /**
         * @generated from protobuf field: loggo.api.telemetry.LogFilter.Text text = 1;
         */
        text: LogFilter_Text;
    } | {
        oneofKind: "scoped";
        /**
         * @generated from protobuf field: loggo.api.telemetry.LogFilter.Scoped scoped = 2;
         */
        scoped: LogFilter_Scoped;
    } | {
        oneofKind: "and";
        /**
         * @generated from protobuf field: loggo.api.telemetry.LogFilter.And and = 3;
         */
        and: LogFilter_And;
    } | {
        oneofKind: "or";
        /**
         * @generated from protobuf field: loggo.api.telemetry.LogFilter.Or or = 4;
         */
        or: LogFilter_Or;
    } | {
        oneofKind: "not";
        /**
         * @generated from protobuf field: loggo.api.telemetry.LogFilter.Not not = 5;
         */
        not: LogFilter_Not;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message loggo.api.telemetry.LogFilter.Text
 */
export interface LogFilter_Text {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
/**
 * @generated from protobuf message loggo.api.telemetry.LogFilter.Scoped
 */
export interface LogFilter_Scoped {
    /**
     * @generated from protobuf field: string field = 1;
     */
    field: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message loggo.api.telemetry.LogFilter.And
 */
export interface LogFilter_And {
    /**
     * @generated from protobuf field: loggo.api.telemetry.LogFilter a = 1;
     */
    a?: LogFilter;
    /**
     * @generated from protobuf field: loggo.api.telemetry.LogFilter b = 2;
     */
    b?: LogFilter;
}
/**
 * @generated from protobuf message loggo.api.telemetry.LogFilter.Or
 */
export interface LogFilter_Or {
    /**
     * @generated from protobuf field: loggo.api.telemetry.LogFilter a = 1;
     */
    a?: LogFilter;
    /**
     * @generated from protobuf field: loggo.api.telemetry.LogFilter b = 2;
     */
    b?: LogFilter;
}
/**
 * @generated from protobuf message loggo.api.telemetry.LogFilter.Not
 */
export interface LogFilter_Not {
    /**
     * @generated from protobuf field: loggo.api.telemetry.LogFilter a = 1;
     */
    a?: LogFilter;
}
// @generated message type with reflection information, may provide speed optimized methods
class ListLogMessagesRequest$Type extends MessageType<ListLogMessagesRequest> {
    constructor() {
        super("loggo.api.telemetry.ListLogMessagesRequest", [
            { no: 1, name: "from", kind: "message", T: () => Timestamp },
            { no: 2, name: "to", kind: "message", T: () => Timestamp },
            { no: 3, name: "filter", kind: "message", T: () => LogFilter },
            { no: 4, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message loggo.api.telemetry.ListLogMessagesRequest
 */
export const ListLogMessagesRequest = new ListLogMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListLogMessagesResponse$Type extends MessageType<ListLogMessagesResponse> {
    constructor() {
        super("loggo.api.telemetry.ListLogMessagesResponse", [
            { no: 1, name: "batch", kind: "message", T: () => LogBatch }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message loggo.api.telemetry.ListLogMessagesResponse
 */
export const ListLogMessagesResponse = new ListLogMessagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamLogMessagesRequest$Type extends MessageType<StreamLogMessagesRequest> {
    constructor() {
        super("loggo.api.telemetry.StreamLogMessagesRequest", [
            { no: 1, name: "from", kind: "message", T: () => Timestamp },
            { no: 2, name: "filter", kind: "message", T: () => LogFilter },
            { no: 3, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message loggo.api.telemetry.StreamLogMessagesRequest
 */
export const StreamLogMessagesRequest = new StreamLogMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamLogMessagesResponse$Type extends MessageType<StreamLogMessagesResponse> {
    constructor() {
        super("loggo.api.telemetry.StreamLogMessagesResponse", [
            { no: 1, name: "batch", kind: "message", oneof: "response", T: () => LogBatch },
            { no: 2, name: "message", kind: "scalar", oneof: "response", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message loggo.api.telemetry.StreamLogMessagesResponse
 */
export const StreamLogMessagesResponse = new StreamLogMessagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogMessage$Type extends MessageType<LogMessage> {
    constructor() {
        super("loggo.api.telemetry.LogMessage", [
            { no: 1, name: "message", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message loggo.api.telemetry.LogMessage
 */
export const LogMessage = new LogMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogBatch$Type extends MessageType<LogBatch> {
    constructor() {
        super("loggo.api.telemetry.LogBatch", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LogMessage },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message loggo.api.telemetry.LogBatch
 */
export const LogBatch = new LogBatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogFilter$Type extends MessageType<LogFilter> {
    constructor() {
        super("loggo.api.telemetry.LogFilter", [
            { no: 1, name: "text", kind: "message", oneof: "filter", T: () => LogFilter_Text },
            { no: 2, name: "scoped", kind: "message", oneof: "filter", T: () => LogFilter_Scoped },
            { no: 3, name: "and", kind: "message", oneof: "filter", T: () => LogFilter_And },
            { no: 4, name: "or", kind: "message", oneof: "filter", T: () => LogFilter_Or },
            { no: 5, name: "not", kind: "message", oneof: "filter", T: () => LogFilter_Not }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message loggo.api.telemetry.LogFilter
 */
export const LogFilter = new LogFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogFilter_Text$Type extends MessageType<LogFilter_Text> {
    constructor() {
        super("loggo.api.telemetry.LogFilter.Text", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message loggo.api.telemetry.LogFilter.Text
 */
export const LogFilter_Text = new LogFilter_Text$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogFilter_Scoped$Type extends MessageType<LogFilter_Scoped> {
    constructor() {
        super("loggo.api.telemetry.LogFilter.Scoped", [
            { no: 1, name: "field", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message loggo.api.telemetry.LogFilter.Scoped
 */
export const LogFilter_Scoped = new LogFilter_Scoped$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogFilter_And$Type extends MessageType<LogFilter_And> {
    constructor() {
        super("loggo.api.telemetry.LogFilter.And", [
            { no: 1, name: "a", kind: "message", T: () => LogFilter },
            { no: 2, name: "b", kind: "message", T: () => LogFilter }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message loggo.api.telemetry.LogFilter.And
 */
export const LogFilter_And = new LogFilter_And$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogFilter_Or$Type extends MessageType<LogFilter_Or> {
    constructor() {
        super("loggo.api.telemetry.LogFilter.Or", [
            { no: 1, name: "a", kind: "message", T: () => LogFilter },
            { no: 2, name: "b", kind: "message", T: () => LogFilter }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message loggo.api.telemetry.LogFilter.Or
 */
export const LogFilter_Or = new LogFilter_Or$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogFilter_Not$Type extends MessageType<LogFilter_Not> {
    constructor() {
        super("loggo.api.telemetry.LogFilter.Not", [
            { no: 1, name: "a", kind: "message", T: () => LogFilter }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message loggo.api.telemetry.LogFilter.Not
 */
export const LogFilter_Not = new LogFilter_Not$Type();
/**
 * @generated ServiceType for protobuf service loggo.api.telemetry.Telemetry
 */
export const Telemetry = new ServiceType("loggo.api.telemetry.Telemetry", [
    { name: "ListLogMessages", options: {}, I: ListLogMessagesRequest, O: ListLogMessagesResponse },
    { name: "StreamLogMessages", serverStreaming: true, options: {}, I: StreamLogMessagesRequest, O: StreamLogMessagesResponse }
]);
