// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/telemetry.proto

package telemetry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelemetryClient is the client API for Telemetry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryClient interface {
	ListLogMessages(ctx context.Context, in *ListLogMessagesRequest, opts ...grpc.CallOption) (*ListLogMessagesResponse, error)
	StreamLogMessages(ctx context.Context, in *StreamLogMessagesRequest, opts ...grpc.CallOption) (Telemetry_StreamLogMessagesClient, error)
}

type telemetryClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryClient(cc grpc.ClientConnInterface) TelemetryClient {
	return &telemetryClient{cc}
}

func (c *telemetryClient) ListLogMessages(ctx context.Context, in *ListLogMessagesRequest, opts ...grpc.CallOption) (*ListLogMessagesResponse, error) {
	out := new(ListLogMessagesResponse)
	err := c.cc.Invoke(ctx, "/loggo.api.telemetry.Telemetry/ListLogMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryClient) StreamLogMessages(ctx context.Context, in *StreamLogMessagesRequest, opts ...grpc.CallOption) (Telemetry_StreamLogMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Telemetry_ServiceDesc.Streams[0], "/loggo.api.telemetry.Telemetry/StreamLogMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryStreamLogMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Telemetry_StreamLogMessagesClient interface {
	Recv() (*StreamLogMessagesResponse, error)
	grpc.ClientStream
}

type telemetryStreamLogMessagesClient struct {
	grpc.ClientStream
}

func (x *telemetryStreamLogMessagesClient) Recv() (*StreamLogMessagesResponse, error) {
	m := new(StreamLogMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemetryServer is the server API for Telemetry service.
// All implementations must embed UnimplementedTelemetryServer
// for forward compatibility
type TelemetryServer interface {
	ListLogMessages(context.Context, *ListLogMessagesRequest) (*ListLogMessagesResponse, error)
	StreamLogMessages(*StreamLogMessagesRequest, Telemetry_StreamLogMessagesServer) error
	mustEmbedUnimplementedTelemetryServer()
}

// UnimplementedTelemetryServer must be embedded to have forward compatible implementations.
type UnimplementedTelemetryServer struct {
}

func (UnimplementedTelemetryServer) ListLogMessages(context.Context, *ListLogMessagesRequest) (*ListLogMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogMessages not implemented")
}
func (UnimplementedTelemetryServer) StreamLogMessages(*StreamLogMessagesRequest, Telemetry_StreamLogMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogMessages not implemented")
}
func (UnimplementedTelemetryServer) mustEmbedUnimplementedTelemetryServer() {}

// UnsafeTelemetryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServer will
// result in compilation errors.
type UnsafeTelemetryServer interface {
	mustEmbedUnimplementedTelemetryServer()
}

func RegisterTelemetryServer(s grpc.ServiceRegistrar, srv TelemetryServer) {
	s.RegisterService(&Telemetry_ServiceDesc, srv)
}

func _Telemetry_ListLogMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServer).ListLogMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggo.api.telemetry.Telemetry/ListLogMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServer).ListLogMessages(ctx, req.(*ListLogMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telemetry_StreamLogMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLogMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServer).StreamLogMessages(m, &telemetryStreamLogMessagesServer{stream})
}

type Telemetry_StreamLogMessagesServer interface {
	Send(*StreamLogMessagesResponse) error
	grpc.ServerStream
}

type telemetryStreamLogMessagesServer struct {
	grpc.ServerStream
}

func (x *telemetryStreamLogMessagesServer) Send(m *StreamLogMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Telemetry_ServiceDesc is the grpc.ServiceDesc for Telemetry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Telemetry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loggo.api.telemetry.Telemetry",
	HandlerType: (*TelemetryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLogMessages",
			Handler:    _Telemetry_ListLogMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogMessages",
			Handler:       _Telemetry_StreamLogMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/telemetry.proto",
}
