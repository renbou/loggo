// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/pigeoneer.proto

package pigeoneer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PigeoneerClient is the client API for Pigeoneer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PigeoneerClient interface {
	Dispatch(ctx context.Context, opts ...grpc.CallOption) (Pigeoneer_DispatchClient, error)
}

type pigeoneerClient struct {
	cc grpc.ClientConnInterface
}

func NewPigeoneerClient(cc grpc.ClientConnInterface) PigeoneerClient {
	return &pigeoneerClient{cc}
}

func (c *pigeoneerClient) Dispatch(ctx context.Context, opts ...grpc.CallOption) (Pigeoneer_DispatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pigeoneer_ServiceDesc.Streams[0], "/loggo.api.pigeoneer.Pigeoneer/Dispatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &pigeoneerDispatchClient{stream}
	return x, nil
}

type Pigeoneer_DispatchClient interface {
	Send(*DispatchRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type pigeoneerDispatchClient struct {
	grpc.ClientStream
}

func (x *pigeoneerDispatchClient) Send(m *DispatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pigeoneerDispatchClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PigeoneerServer is the server API for Pigeoneer service.
// All implementations must embed UnimplementedPigeoneerServer
// for forward compatibility
type PigeoneerServer interface {
	Dispatch(Pigeoneer_DispatchServer) error
	mustEmbedUnimplementedPigeoneerServer()
}

// UnimplementedPigeoneerServer must be embedded to have forward compatible implementations.
type UnimplementedPigeoneerServer struct {
}

func (UnimplementedPigeoneerServer) Dispatch(Pigeoneer_DispatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}
func (UnimplementedPigeoneerServer) mustEmbedUnimplementedPigeoneerServer() {}

// UnsafePigeoneerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PigeoneerServer will
// result in compilation errors.
type UnsafePigeoneerServer interface {
	mustEmbedUnimplementedPigeoneerServer()
}

func RegisterPigeoneerServer(s grpc.ServiceRegistrar, srv PigeoneerServer) {
	s.RegisterService(&Pigeoneer_ServiceDesc, srv)
}

func _Pigeoneer_Dispatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PigeoneerServer).Dispatch(&pigeoneerDispatchServer{stream})
}

type Pigeoneer_DispatchServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*DispatchRequest, error)
	grpc.ServerStream
}

type pigeoneerDispatchServer struct {
	grpc.ServerStream
}

func (x *pigeoneerDispatchServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pigeoneerDispatchServer) Recv() (*DispatchRequest, error) {
	m := new(DispatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Pigeoneer_ServiceDesc is the grpc.ServiceDesc for Pigeoneer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pigeoneer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loggo.api.pigeoneer.Pigeoneer",
	HandlerType: (*PigeoneerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Dispatch",
			Handler:       _Pigeoneer_Dispatch_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/pigeoneer.proto",
}
