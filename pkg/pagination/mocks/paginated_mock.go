package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/renbou/loggo/pkg/pagination.paginated -o ./paginated_mock.go -n PaginatedMock

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// PaginatedMock implements pagination.paginated
type PaginatedMock struct {
	t minimock.Tester

	funcGetPageSize          func() (i1 int32)
	inspectFuncGetPageSize   func()
	afterGetPageSizeCounter  uint64
	beforeGetPageSizeCounter uint64
	GetPageSizeMock          mPaginatedMockGetPageSize

	funcGetPageToken          func() (s1 string)
	inspectFuncGetPageToken   func()
	afterGetPageTokenCounter  uint64
	beforeGetPageTokenCounter uint64
	GetPageTokenMock          mPaginatedMockGetPageToken
}

// NewPaginatedMock returns a mock for pagination.paginated
func NewPaginatedMock(t minimock.Tester) *PaginatedMock {
	m := &PaginatedMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetPageSizeMock = mPaginatedMockGetPageSize{mock: m}

	m.GetPageTokenMock = mPaginatedMockGetPageToken{mock: m}

	return m
}

type mPaginatedMockGetPageSize struct {
	mock               *PaginatedMock
	defaultExpectation *PaginatedMockGetPageSizeExpectation
	expectations       []*PaginatedMockGetPageSizeExpectation
}

// PaginatedMockGetPageSizeExpectation specifies expectation struct of the paginated.GetPageSize
type PaginatedMockGetPageSizeExpectation struct {
	mock *PaginatedMock

	results *PaginatedMockGetPageSizeResults
	Counter uint64
}

// PaginatedMockGetPageSizeResults contains results of the paginated.GetPageSize
type PaginatedMockGetPageSizeResults struct {
	i1 int32
}

// Expect sets up expected params for paginated.GetPageSize
func (mmGetPageSize *mPaginatedMockGetPageSize) Expect() *mPaginatedMockGetPageSize {
	if mmGetPageSize.mock.funcGetPageSize != nil {
		mmGetPageSize.mock.t.Fatalf("PaginatedMock.GetPageSize mock is already set by Set")
	}

	if mmGetPageSize.defaultExpectation == nil {
		mmGetPageSize.defaultExpectation = &PaginatedMockGetPageSizeExpectation{}
	}

	return mmGetPageSize
}

// Inspect accepts an inspector function that has same arguments as the paginated.GetPageSize
func (mmGetPageSize *mPaginatedMockGetPageSize) Inspect(f func()) *mPaginatedMockGetPageSize {
	if mmGetPageSize.mock.inspectFuncGetPageSize != nil {
		mmGetPageSize.mock.t.Fatalf("Inspect function is already set for PaginatedMock.GetPageSize")
	}

	mmGetPageSize.mock.inspectFuncGetPageSize = f

	return mmGetPageSize
}

// Return sets up results that will be returned by paginated.GetPageSize
func (mmGetPageSize *mPaginatedMockGetPageSize) Return(i1 int32) *PaginatedMock {
	if mmGetPageSize.mock.funcGetPageSize != nil {
		mmGetPageSize.mock.t.Fatalf("PaginatedMock.GetPageSize mock is already set by Set")
	}

	if mmGetPageSize.defaultExpectation == nil {
		mmGetPageSize.defaultExpectation = &PaginatedMockGetPageSizeExpectation{mock: mmGetPageSize.mock}
	}
	mmGetPageSize.defaultExpectation.results = &PaginatedMockGetPageSizeResults{i1}
	return mmGetPageSize.mock
}

// Set uses given function f to mock the paginated.GetPageSize method
func (mmGetPageSize *mPaginatedMockGetPageSize) Set(f func() (i1 int32)) *PaginatedMock {
	if mmGetPageSize.defaultExpectation != nil {
		mmGetPageSize.mock.t.Fatalf("Default expectation is already set for the paginated.GetPageSize method")
	}

	if len(mmGetPageSize.expectations) > 0 {
		mmGetPageSize.mock.t.Fatalf("Some expectations are already set for the paginated.GetPageSize method")
	}

	mmGetPageSize.mock.funcGetPageSize = f
	return mmGetPageSize.mock
}

// GetPageSize implements pagination.paginated
func (mmGetPageSize *PaginatedMock) GetPageSize() (i1 int32) {
	mm_atomic.AddUint64(&mmGetPageSize.beforeGetPageSizeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPageSize.afterGetPageSizeCounter, 1)

	if mmGetPageSize.inspectFuncGetPageSize != nil {
		mmGetPageSize.inspectFuncGetPageSize()
	}

	if mmGetPageSize.GetPageSizeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPageSize.GetPageSizeMock.defaultExpectation.Counter, 1)

		mm_results := mmGetPageSize.GetPageSizeMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPageSize.t.Fatal("No results are set for the PaginatedMock.GetPageSize")
		}
		return (*mm_results).i1
	}
	if mmGetPageSize.funcGetPageSize != nil {
		return mmGetPageSize.funcGetPageSize()
	}
	mmGetPageSize.t.Fatalf("Unexpected call to PaginatedMock.GetPageSize.")
	return
}

// GetPageSizeAfterCounter returns a count of finished PaginatedMock.GetPageSize invocations
func (mmGetPageSize *PaginatedMock) GetPageSizeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPageSize.afterGetPageSizeCounter)
}

// GetPageSizeBeforeCounter returns a count of PaginatedMock.GetPageSize invocations
func (mmGetPageSize *PaginatedMock) GetPageSizeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPageSize.beforeGetPageSizeCounter)
}

// MinimockGetPageSizeDone returns true if the count of the GetPageSize invocations corresponds
// the number of defined expectations
func (m *PaginatedMock) MinimockGetPageSizeDone() bool {
	for _, e := range m.GetPageSizeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPageSizeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPageSizeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPageSize != nil && mm_atomic.LoadUint64(&m.afterGetPageSizeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPageSizeInspect logs each unmet expectation
func (m *PaginatedMock) MinimockGetPageSizeInspect() {
	for _, e := range m.GetPageSizeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PaginatedMock.GetPageSize")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPageSizeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPageSizeCounter) < 1 {
		m.t.Error("Expected call to PaginatedMock.GetPageSize")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPageSize != nil && mm_atomic.LoadUint64(&m.afterGetPageSizeCounter) < 1 {
		m.t.Error("Expected call to PaginatedMock.GetPageSize")
	}
}

type mPaginatedMockGetPageToken struct {
	mock               *PaginatedMock
	defaultExpectation *PaginatedMockGetPageTokenExpectation
	expectations       []*PaginatedMockGetPageTokenExpectation
}

// PaginatedMockGetPageTokenExpectation specifies expectation struct of the paginated.GetPageToken
type PaginatedMockGetPageTokenExpectation struct {
	mock *PaginatedMock

	results *PaginatedMockGetPageTokenResults
	Counter uint64
}

// PaginatedMockGetPageTokenResults contains results of the paginated.GetPageToken
type PaginatedMockGetPageTokenResults struct {
	s1 string
}

// Expect sets up expected params for paginated.GetPageToken
func (mmGetPageToken *mPaginatedMockGetPageToken) Expect() *mPaginatedMockGetPageToken {
	if mmGetPageToken.mock.funcGetPageToken != nil {
		mmGetPageToken.mock.t.Fatalf("PaginatedMock.GetPageToken mock is already set by Set")
	}

	if mmGetPageToken.defaultExpectation == nil {
		mmGetPageToken.defaultExpectation = &PaginatedMockGetPageTokenExpectation{}
	}

	return mmGetPageToken
}

// Inspect accepts an inspector function that has same arguments as the paginated.GetPageToken
func (mmGetPageToken *mPaginatedMockGetPageToken) Inspect(f func()) *mPaginatedMockGetPageToken {
	if mmGetPageToken.mock.inspectFuncGetPageToken != nil {
		mmGetPageToken.mock.t.Fatalf("Inspect function is already set for PaginatedMock.GetPageToken")
	}

	mmGetPageToken.mock.inspectFuncGetPageToken = f

	return mmGetPageToken
}

// Return sets up results that will be returned by paginated.GetPageToken
func (mmGetPageToken *mPaginatedMockGetPageToken) Return(s1 string) *PaginatedMock {
	if mmGetPageToken.mock.funcGetPageToken != nil {
		mmGetPageToken.mock.t.Fatalf("PaginatedMock.GetPageToken mock is already set by Set")
	}

	if mmGetPageToken.defaultExpectation == nil {
		mmGetPageToken.defaultExpectation = &PaginatedMockGetPageTokenExpectation{mock: mmGetPageToken.mock}
	}
	mmGetPageToken.defaultExpectation.results = &PaginatedMockGetPageTokenResults{s1}
	return mmGetPageToken.mock
}

// Set uses given function f to mock the paginated.GetPageToken method
func (mmGetPageToken *mPaginatedMockGetPageToken) Set(f func() (s1 string)) *PaginatedMock {
	if mmGetPageToken.defaultExpectation != nil {
		mmGetPageToken.mock.t.Fatalf("Default expectation is already set for the paginated.GetPageToken method")
	}

	if len(mmGetPageToken.expectations) > 0 {
		mmGetPageToken.mock.t.Fatalf("Some expectations are already set for the paginated.GetPageToken method")
	}

	mmGetPageToken.mock.funcGetPageToken = f
	return mmGetPageToken.mock
}

// GetPageToken implements pagination.paginated
func (mmGetPageToken *PaginatedMock) GetPageToken() (s1 string) {
	mm_atomic.AddUint64(&mmGetPageToken.beforeGetPageTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPageToken.afterGetPageTokenCounter, 1)

	if mmGetPageToken.inspectFuncGetPageToken != nil {
		mmGetPageToken.inspectFuncGetPageToken()
	}

	if mmGetPageToken.GetPageTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPageToken.GetPageTokenMock.defaultExpectation.Counter, 1)

		mm_results := mmGetPageToken.GetPageTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPageToken.t.Fatal("No results are set for the PaginatedMock.GetPageToken")
		}
		return (*mm_results).s1
	}
	if mmGetPageToken.funcGetPageToken != nil {
		return mmGetPageToken.funcGetPageToken()
	}
	mmGetPageToken.t.Fatalf("Unexpected call to PaginatedMock.GetPageToken.")
	return
}

// GetPageTokenAfterCounter returns a count of finished PaginatedMock.GetPageToken invocations
func (mmGetPageToken *PaginatedMock) GetPageTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPageToken.afterGetPageTokenCounter)
}

// GetPageTokenBeforeCounter returns a count of PaginatedMock.GetPageToken invocations
func (mmGetPageToken *PaginatedMock) GetPageTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPageToken.beforeGetPageTokenCounter)
}

// MinimockGetPageTokenDone returns true if the count of the GetPageToken invocations corresponds
// the number of defined expectations
func (m *PaginatedMock) MinimockGetPageTokenDone() bool {
	for _, e := range m.GetPageTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPageTokenMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPageTokenCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPageToken != nil && mm_atomic.LoadUint64(&m.afterGetPageTokenCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPageTokenInspect logs each unmet expectation
func (m *PaginatedMock) MinimockGetPageTokenInspect() {
	for _, e := range m.GetPageTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PaginatedMock.GetPageToken")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPageTokenMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPageTokenCounter) < 1 {
		m.t.Error("Expected call to PaginatedMock.GetPageToken")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPageToken != nil && mm_atomic.LoadUint64(&m.afterGetPageTokenCounter) < 1 {
		m.t.Error("Expected call to PaginatedMock.GetPageToken")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PaginatedMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetPageSizeInspect()

		m.MinimockGetPageTokenInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PaginatedMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PaginatedMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetPageSizeDone() &&
		m.MinimockGetPageTokenDone()
}
